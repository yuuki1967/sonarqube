sonarqube {
  properties {
    property "sonar.projectName", "${projectTitle} :: VSTS"
    property "sonar.sources", "src/main/js"
    property "sonar.tests", "src/main/js"
    property "sonar.test.inclusions", "src/main/js/**/__tests__/**"
    property "sonar.exclusions", "src/main/js/libs/third-party/**/*,src/main/js/**/__tests__/**"
    property "sonar.eslint.reportPaths", "eslint-report.json"
    property "sonar.typescript.lcov.reportPaths", "coverage/lcov.info"
  }
}

yarn_run {
  ['config', 'public', 'scripts', 'src'].each {
    inputs.dir(it).withPathSensitivity(PathSensitivity.RELATIVE)
  }
  ['.babelrc', 'package.json', 'tsconfig.json', 'yarn.lock'].each {
    inputs.file(it).withPathSensitivity(PathSensitivity.RELATIVE)
  }
  outputs.dir('build/webapp')
  outputs.cacheIf { true }
  dependsOn(yarn, ':server:sonar-web:yarn')
  args = ['build']
}
build.dependsOn(yarn_run)

def sources = fileTree(dir: "src") + fileTree(dir: "scripts") + fileTree(dir: "config")

task licenseCheckWeb(type: com.hierynomus.gradle.license.tasks.LicenseCheck) {
  source = sources
}
licenseMain.dependsOn licenseCheckWeb

task licenseFormatWeb(type: com.hierynomus.gradle.license.tasks.LicenseFormat) {
  source = sources
}
licenseFormat.dependsOn licenseFormatWeb
